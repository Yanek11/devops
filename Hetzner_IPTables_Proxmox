### Hetzner host IPs ###

    VM traffic
        88.99.213.79	00:50:56:00:A1:75	static.79.213.99.88.clients.your-server.de

    WEB Management
        88.99.213.85		static.85.213.99.88.clients.your-server.de	 

    gateway
    88.99.213.65


# Proxmox - IPTables -SSH/WebGUI access #

    #!/bin/bash

    # Define IP addresses and ports
    IP_EXTERNAL_MANAGE="88.99.213.85"  # Management IP (Proxmox host)
    IP_EXTERNAL_VMS="88.99.213.79"      # VMs IP

    LOOPBACK="127.0.0.1"

    SSH_PORT_EXTERNAL_MANAGE="666"   # SSH to Proxmox host
    SSH_PORT_EXTERNAL_VMS="11111"     # SSH to VMs
    SSH_PORT_INTERNAL="11111"          # SSH port on Proxmox host
    SSH_PORT_VM_INTERNAL="11111"       # SSH port on the VM


    PROXMOX_PORT_EXTERNAL="777"
    PROXMOX_PORT_INTERNAL="8006"

    # Allowed IP addresses and subnets (same for all in this example)
    ALLOWED_IPS=("138.199.59.0/24" "45.134.212.0/24" "85.221.131.0/24")


    # Clear existing iptables rules (use with caution!)
    sudo iptables -F
    sudo iptables -t nat -F  # Important: Clear the nat table as well

    # 1. Allow established/related connections
    sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # 2. Loopback interface
    sudo iptables -A INPUT -i lo -j ACCEPT
    sudo iptables -A OUTPUT -o lo -j ACCEPT

    # 3. SSH Rules - Management traffic (Proxmox host - Port 666 to 11111)
    for ip in "${ALLOWED_IPS[@]}"; do
    sudo iptables -t nat -A PREROUTING -p tcp --dport $SSH_PORT_EXTERNAL_MANAGE -s "$ip" -j DNAT --to-destination $IP_EXTERNAL_MANAGE:$SSH_PORT_INTERNAL
    sudo iptables -A INPUT -p tcp -m tcp --dport $SSH_PORT_INTERNAL -s "$ip" -j ACCEPT  # Allow traffic on port 11111 (internal)
    done

    # 4. SSH Rules - VMs traffic (Port 11111 directly)
    for ip in "${ALLOWED_IPS[@]}"; do
    sudo iptables -A INPUT -p tcp -m tcp --dport $SSH_PORT_EXTERNAL_VMS -s "$ip" -j ACCEPT  # Allow traffic directly on port 11111
    done

    # 5. Proxmox Rules (management traffic)
    for ip in "${ALLOWED_IPS[@]}"; do
    sudo iptables -t nat -A PREROUTING -p tcp --dport $PROXMOX_PORT_EXTERNAL -s "$ip" -j DNAT --to-destination $IP_EXTERNAL_MANAGE:$PROXMOX_PORT_INTERNAL
    sudo iptables -A INPUT -p tcp -m tcp --dport $PROXMOX_PORT_INTERNAL -s "$ip" -j ACCEPT
    done

    # 6. SNAT (Masquerade) - Important if behind a NAT gateway
    sudo iptables -t nat -A POSTROUTING -j MASQUERADE  # Uncomment if needed

    # 7. Default policies (AFTER all other rules) - CRUCIAL for security
    sudo iptables -P INPUT DROP
    # sudo iptables -P FORWARD DROP  # Uncomment if you're using forwarding
    sudo iptables -P OUTPUT ACCEPT

    # 8. Save the rules (essential!)
    sudo sh -c 'iptables-save > /etc/iptables/rules.v4'
    #sudo iptables-save > /etc/iptables/rules.v6 # If you are using IPv6

    echo "iptables rules applied."

# Proxmox - IPTables -SSH/WebGUI access # END

    


# OPTIONAL # LOGGING SSH connections
    
    sudo iptables -N ssh_log
    
    # Log successful SSH connections (optional, but good for auditing)
    sudo iptables -A ssh_log -p tcp --dport 666 -j LOG --log-prefix "SSH_ACCEPT: " --log-level info

    # Log failed SSH connections (dropped by the default policy)
    sudo iptables -A ssh_log -p tcp --dport 666 -m state --state INVALID -j LOG --log-prefix "SSH_INVALID: " --log-level info

    # Log SSH connections dropped by an explicit DROP rule (if you have one)
    sudo iptables -A ssh_log -p tcp --dport 666 -j LOG --log-prefix "SSH_DROP: " --log-level info

    # Add a rule to the INPUT chain to jump to the logging chain for SSH traffic.
    sudo iptables -I INPUT -p tcp --dport 666 -j ssh_log

# OPTIONAL # LOGGING SSH connections  END

sudo sh -c 'iptables-save > /etc/iptables/rules.v4'
sudo netfilter-persistent save




# Create a systemd service file (e.g., /etc/systemd/system/iptables.service):
sudo nano /etc/systemd/system/iptables.service
        [Unit]
        Description=iptables firewall rules
        After=network.target
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/sbin/iptables-restore < /etc/iptables/rules.v4
        ExecStop=/sbin/iptables-save > /etc/iptables/rules.v4
        
        [Install]
        WantedBy=multi-user.target
# enable and start service
sudo systemctl enable iptables.service
sudo systemctl start iptables.service


# Save the rules (crucial!)
sudo iptables -save > /etc/iptables/rules.v4

# Make rules persistent (Debian/Ubuntu example)
sudo apt-get install iptables-persistent  # If not already installed
sudo iptables-persistent save




# web access and SSH - end



