############### vagrant and virtual box - installation ############### 
 
    # 1. removing vagrant shit
        sudo apt-get remove --purge virtualbox
        sudo apt-get remove --purge vagrant
        sudo apt autoremove 
        sudo apt autoclean
        sudo apt update
        sudo kill -9 $(ps axhf |grep Headless | grep -v grep |awk '{print $1}')

        # removing virtualbox shit
        ls -las /usr/lib/virtualbox/VBoxHeadless
        sudo rm /usr/lib/virtualbox/VBoxHeadless

        #checking
        sudo ps axhf |grep virtualbox | grep -v grep



        # listing and removing VBox files created by Vagrant  *.vbox*

        # listing
        sudo find / -type f -name "*VagrantVMs*.vbox*" 2>/dev/null | while IFS= read -r file; do   sudo ls -las "$file"; done

        # deleting
        sudo find / -type f -name "*VagrantVMs*.vbox*" 2>/dev/null | while IFS= read -r file; do   sudo rm "$file"; done


        # searching for virtualbox and Vagrant shit/leftovers
        
        # VirtualBox
        # listing
        sudo find / -type f -name "*virtualbox*" 2>/dev/null |grep -v snap -v |grep -v Yaru| grep -v deb| grep -v git| while IFS= read -r file; do  sudo ls -las "$file"; done
        # deleting
        sudo find / -type f -name "*virtualbox*" 2>/dev/null |grep -v snap -v |grep -v Yaru| grep -v deb| grep -v git| while IFS= read -r file; do  sudo rm -dr "$file"; done

        # Vagrant
        #listing
        sudo find / -type f -name "\.vagrant" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo ls -las "$file"; done
        #deleting
        sudo find / -type f -name "\.vagrant" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo rm "$file"; done
        # deleting Vagrant files 
        sudo find / -type f -name "*vagrant*" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo rm  "$file"; done
        # deleting vagrant directories
        sudo find  / -type d -name \.vagrant\.d 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo ls -las "$file"; done
        sudo find  / -type d -name \.vagrant\.d 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo rm -rd "$file"; done

        # listing and deleting vagrant/VirtualBox VMDK files
        #listing
        sudo find / -type f -name "*vmdk" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo ls -las "$file"; done
        #deleting
        sudo find / -type f -name "*vmdk" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo rm "$file"; done

        # listing/removing Vagrant VMs files
        #listing
        sudo find / -type d -name "VagrantVM*" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo ls -las "$file"; done
        # deleting
        sudo find / -type d -name "VagrantVM*" 2>/dev/null |grep -v snap -v |grep -v Yaru| while IFS= read -r file; do  sudo rm -dr "$file"; done
    # removing vagrant shit
    
    # 2. vagrant installation
            - sudo apt install vagrant 
            - installing box image 
                instructions https://portal.cloud.hashicorp.com/vagrant/discover/generic-x64/ubuntu1604
                
                vagrant init generic-x64/ubuntu1604 --box-version 4.3.12
                edit Vagrantfile and add:
                'Vagrant.configure("2") do |config|
                config.vm.box = "generic-x64/ubuntu1604"
                config.vm.box_version = "4.3.12"
                end'    
            
    # 3. vagrant virtualizazion provider. virtualbox
        # virtual box
            version for Ubuntu 22.04
            https://download.virtualbox.org/virtualbox/7.1.6/virtualbox-7.1_7.1.6-167084~Ubuntu~jammy_amd64.deb
            sudo dpkg -i virtualbox-7.1_7.1.6-167084~Ubuntu~jammy_amd64.deb 
    

    # 4. vagrant virtualizazion provider. KVM / libvirt   
        - KVM / libvirt (https://ostechnix.com/how-to-use-vagrant-with-libvirt-kvm-provider/)
            sudo apt install qemu libvirt-daemon-system libvirt-clients libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev ruby-libvirt ebtables dnsmasq-base
        - vagrant-libvirt plugin
            vagrant plugin install vagrant-libvirt
        - plugin: converting to different providers
            vagrant plugin install vagrant-mutate
        - download distro libvirt/qemu box: 
            example: generic/debian8
            https://portal.cloud.hashicorp.com/vagrant/discover/generic/debian8

        - SSH: update ssh_config - comment  out options below
                nano /etc/ssh/ssh_config
                # ServerAliveInterval 100
                # ClientAliveCountMax 10000
                # ClientAliveInterval 60
        - vagrant up
        - vagrant ssh
        - CONNECTED !!!
        - SSH again: 
            ISSUE: when tried to configure pubkey authentication was getting "permission denied pubkey"
                "ssh vagrant@192.168.121.195
                vagrant@192.168.121.195: Permission denied (publickey)."
                verbose mode showed: "send_pubkey_test: no mutual signature algorithm"

            SOLUTION - force remote host (Debian 8) to accept another auth method 
                "ssh -o PubkeyAcceptedKeyTypes=+ssh-rsa -vvv vagrant@192.168.121.195"
                

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
admin-konrado: 


            #



        - download Debian image
          wget   https://cdimage.debian.org/mirror/cdimage/archive/11.3.0/amd64/iso-dvd/debian-11.3.0-amd64-DVD-1.iso
        

        - create VM
        (source    https://wiki.debian.org/QEMU#QEMU-1)
       "
       qemu-system-x86_64 -hda /home/admin-konrado/qemu/images/debian11.qcow \
        -cdrom /home/admin-konrado/installations/debian-11.3.0-amd64-DVD-1.iso \
        -boot d -m 512 -serial mon:stdio -nographic"
            fails


    
    
    # 3. scenarios
        Accurately modeling a multi-server production topology, such as separating a web and database server. 
        Disaster-case testing: machines dying, network partitions, slow networks, inconsistent world views, etc.
    # scenarions    

################ END - vagrant and virtual box vagrant and virtual box - installation ############### 


############### vagrant and virtual box - ANSIBLE - scenarions / configurations ############### 
    
    # 1. updating and upgrading Linux multiple servers from older versions
        example: ubuntu 16 -> ubuntu newest 
            - same subnet
            - different subnets
    
    # 2.

############### vagrant and virtual box - scenarions / configurations ############### 




vagrant destroy -f;VAGRANT_LOG=debug vagrant up > vagrant_log.txt 2>&1

